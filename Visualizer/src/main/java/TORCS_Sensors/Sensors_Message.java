// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto_schema.proto

package TORCS_Sensors;

public final class Sensors_Message {
  private Sensors_Message() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SensorsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:TORCS_Sensors.Sensors)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional float accel = 1;</code>
     */
    boolean hasAccel();
    /**
     * <code>optional float accel = 1;</code>
     */
    float getAccel();

    /**
     * <code>optional float breaking = 2;</code>
     */
    boolean hasBreaking();
    /**
     * <code>optional float breaking = 2;</code>
     */
    float getBreaking();

    /**
     * <code>optional int32 gear = 3;</code>
     */
    boolean hasGear();
    /**
     * <code>optional int32 gear = 3;</code>
     */
    int getGear();

    /**
     * <code>optional float steer = 4;</code>
     */
    boolean hasSteer();
    /**
     * <code>optional float steer = 4;</code>
     */
    float getSteer();

    /**
     * <code>optional int32 meta = 5;</code>
     */
    boolean hasMeta();
    /**
     * <code>optional int32 meta = 5;</code>
     */
    int getMeta();

    /**
     * <code>optional float clutch = 6;</code>
     */
    boolean hasClutch();
    /**
     * <code>optional float clutch = 6;</code>
     */
    float getClutch();

    /**
     * <code>optional int32 focus = 7;</code>
     */
    boolean hasFocus();
    /**
     * <code>optional int32 focus = 7;</code>
     */
    int getFocus();

    /**
     * <code>optional float angle = 8;</code>
     */
    boolean hasAngle();
    /**
     * <code>optional float angle = 8;</code>
     */
    float getAngle();

    /**
     * <code>optional float cuLapTime = 9;</code>
     */
    boolean hasCuLapTime();
    /**
     * <code>optional float cuLapTime = 9;</code>
     */
    float getCuLapTime();

    /**
     * <code>optional int32 damage = 10;</code>
     */
    boolean hasDamage();
    /**
     * <code>optional int32 damage = 10;</code>
     */
    int getDamage();

    /**
     * <code>optional float distFromStart = 11;</code>
     */
    boolean hasDistFromStart();
    /**
     * <code>optional float distFromStart = 11;</code>
     */
    float getDistFromStart();

    /**
     * <code>optional float totalDistFromStart = 12;</code>
     */
    boolean hasTotalDistFromStart();
    /**
     * <code>optional float totalDistFromStart = 12;</code>
     */
    float getTotalDistFromStart();

    /**
     * <code>optional float distRaced = 13;</code>
     */
    boolean hasDistRaced();
    /**
     * <code>optional float distRaced = 13;</code>
     */
    float getDistRaced();

    /**
     * <code>optional float fuel = 14;</code>
     */
    boolean hasFuel();
    /**
     * <code>optional float fuel = 14;</code>
     */
    float getFuel();

    /**
     * <code>optional float lastLapTime = 15;</code>
     */
    boolean hasLastLapTime();
    /**
     * <code>optional float lastLapTime = 15;</code>
     */
    float getLastLapTime();

    /**
     * <code>optional int32 racePos = 16;</code>
     */
    boolean hasRacePos();
    /**
     * <code>optional int32 racePos = 16;</code>
     */
    int getRacePos();

    /**
     * <code>optional float rpm = 17;</code>
     */
    boolean hasRpm();
    /**
     * <code>optional float rpm = 17;</code>
     */
    float getRpm();

    /**
     * <code>optional float speedX = 18;</code>
     */
    boolean hasSpeedX();
    /**
     * <code>optional float speedX = 18;</code>
     */
    float getSpeedX();

    /**
     * <code>optional float speedY = 19;</code>
     */
    boolean hasSpeedY();
    /**
     * <code>optional float speedY = 19;</code>
     */
    float getSpeedY();

    /**
     * <code>optional float speedZ = 20;</code>
     */
    boolean hasSpeedZ();
    /**
     * <code>optional float speedZ = 20;</code>
     */
    float getSpeedZ();

    /**
     * <code>optional float distToMiddle = 21;</code>
     */
    boolean hasDistToMiddle();
    /**
     * <code>optional float distToMiddle = 21;</code>
     */
    float getDistToMiddle();

    /**
     * <code>optional float posZ = 22;</code>
     */
    boolean hasPosZ();
    /**
     * <code>optional float posZ = 22;</code>
     */
    float getPosZ();

    /**
     * <code>optional float fps = 23;</code>
     */
    boolean hasFps();
    /**
     * <code>optional float fps = 23;</code>
     */
    float getFps();

    /**
     * <code>optional int32 count = 24;</code>
     */
    boolean hasCount();
    /**
     * <code>optional int32 count = 24;</code>
     */
    int getCount();
  }
  /**
   * Protobuf type {@code TORCS_Sensors.Sensors}
   */
  public  static final class Sensors extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:TORCS_Sensors.Sensors)
      SensorsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Sensors.newBuilder() to construct.
    private Sensors(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Sensors() {
      accel_ = 0F;
      breaking_ = 0F;
      gear_ = 0;
      steer_ = 0F;
      meta_ = 0;
      clutch_ = 0F;
      focus_ = 0;
      angle_ = 0F;
      cuLapTime_ = 0F;
      damage_ = 0;
      distFromStart_ = 0F;
      totalDistFromStart_ = 0F;
      distRaced_ = 0F;
      fuel_ = 0F;
      lastLapTime_ = 0F;
      racePos_ = 0;
      rpm_ = 0F;
      speedX_ = 0F;
      speedY_ = 0F;
      speedZ_ = 0F;
      distToMiddle_ = 0F;
      posZ_ = 0F;
      fps_ = 0F;
      count_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Sensors(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 13: {
              bitField0_ |= 0x00000001;
              accel_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              breaking_ = input.readFloat();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              gear_ = input.readInt32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              steer_ = input.readFloat();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              meta_ = input.readInt32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              clutch_ = input.readFloat();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              focus_ = input.readInt32();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              angle_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              cuLapTime_ = input.readFloat();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              damage_ = input.readInt32();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              distFromStart_ = input.readFloat();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              totalDistFromStart_ = input.readFloat();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              distRaced_ = input.readFloat();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              fuel_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00004000;
              lastLapTime_ = input.readFloat();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              racePos_ = input.readInt32();
              break;
            }
            case 141: {
              bitField0_ |= 0x00010000;
              rpm_ = input.readFloat();
              break;
            }
            case 149: {
              bitField0_ |= 0x00020000;
              speedX_ = input.readFloat();
              break;
            }
            case 157: {
              bitField0_ |= 0x00040000;
              speedY_ = input.readFloat();
              break;
            }
            case 165: {
              bitField0_ |= 0x00080000;
              speedZ_ = input.readFloat();
              break;
            }
            case 173: {
              bitField0_ |= 0x00100000;
              distToMiddle_ = input.readFloat();
              break;
            }
            case 181: {
              bitField0_ |= 0x00200000;
              posZ_ = input.readFloat();
              break;
            }
            case 189: {
              bitField0_ |= 0x00400000;
              fps_ = input.readFloat();
              break;
            }
            case 192: {
              bitField0_ |= 0x00800000;
              count_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TORCS_Sensors.Sensors_Message.internal_static_TORCS_Sensors_Sensors_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TORCS_Sensors.Sensors_Message.internal_static_TORCS_Sensors_Sensors_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              TORCS_Sensors.Sensors_Message.Sensors.class, TORCS_Sensors.Sensors_Message.Sensors.Builder.class);
    }

    private int bitField0_;
    public static final int ACCEL_FIELD_NUMBER = 1;
    private float accel_;
    /**
     * <code>optional float accel = 1;</code>
     */
    public boolean hasAccel() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float accel = 1;</code>
     */
    public float getAccel() {
      return accel_;
    }

    public static final int BREAKING_FIELD_NUMBER = 2;
    private float breaking_;
    /**
     * <code>optional float breaking = 2;</code>
     */
    public boolean hasBreaking() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float breaking = 2;</code>
     */
    public float getBreaking() {
      return breaking_;
    }

    public static final int GEAR_FIELD_NUMBER = 3;
    private int gear_;
    /**
     * <code>optional int32 gear = 3;</code>
     */
    public boolean hasGear() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 gear = 3;</code>
     */
    public int getGear() {
      return gear_;
    }

    public static final int STEER_FIELD_NUMBER = 4;
    private float steer_;
    /**
     * <code>optional float steer = 4;</code>
     */
    public boolean hasSteer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float steer = 4;</code>
     */
    public float getSteer() {
      return steer_;
    }

    public static final int META_FIELD_NUMBER = 5;
    private int meta_;
    /**
     * <code>optional int32 meta = 5;</code>
     */
    public boolean hasMeta() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 meta = 5;</code>
     */
    public int getMeta() {
      return meta_;
    }

    public static final int CLUTCH_FIELD_NUMBER = 6;
    private float clutch_;
    /**
     * <code>optional float clutch = 6;</code>
     */
    public boolean hasClutch() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float clutch = 6;</code>
     */
    public float getClutch() {
      return clutch_;
    }

    public static final int FOCUS_FIELD_NUMBER = 7;
    private int focus_;
    /**
     * <code>optional int32 focus = 7;</code>
     */
    public boolean hasFocus() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 focus = 7;</code>
     */
    public int getFocus() {
      return focus_;
    }

    public static final int ANGLE_FIELD_NUMBER = 8;
    private float angle_;
    /**
     * <code>optional float angle = 8;</code>
     */
    public boolean hasAngle() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float angle = 8;</code>
     */
    public float getAngle() {
      return angle_;
    }

    public static final int CULAPTIME_FIELD_NUMBER = 9;
    private float cuLapTime_;
    /**
     * <code>optional float cuLapTime = 9;</code>
     */
    public boolean hasCuLapTime() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float cuLapTime = 9;</code>
     */
    public float getCuLapTime() {
      return cuLapTime_;
    }

    public static final int DAMAGE_FIELD_NUMBER = 10;
    private int damage_;
    /**
     * <code>optional int32 damage = 10;</code>
     */
    public boolean hasDamage() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 damage = 10;</code>
     */
    public int getDamage() {
      return damage_;
    }

    public static final int DISTFROMSTART_FIELD_NUMBER = 11;
    private float distFromStart_;
    /**
     * <code>optional float distFromStart = 11;</code>
     */
    public boolean hasDistFromStart() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float distFromStart = 11;</code>
     */
    public float getDistFromStart() {
      return distFromStart_;
    }

    public static final int TOTALDISTFROMSTART_FIELD_NUMBER = 12;
    private float totalDistFromStart_;
    /**
     * <code>optional float totalDistFromStart = 12;</code>
     */
    public boolean hasTotalDistFromStart() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float totalDistFromStart = 12;</code>
     */
    public float getTotalDistFromStart() {
      return totalDistFromStart_;
    }

    public static final int DISTRACED_FIELD_NUMBER = 13;
    private float distRaced_;
    /**
     * <code>optional float distRaced = 13;</code>
     */
    public boolean hasDistRaced() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float distRaced = 13;</code>
     */
    public float getDistRaced() {
      return distRaced_;
    }

    public static final int FUEL_FIELD_NUMBER = 14;
    private float fuel_;
    /**
     * <code>optional float fuel = 14;</code>
     */
    public boolean hasFuel() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float fuel = 14;</code>
     */
    public float getFuel() {
      return fuel_;
    }

    public static final int LASTLAPTIME_FIELD_NUMBER = 15;
    private float lastLapTime_;
    /**
     * <code>optional float lastLapTime = 15;</code>
     */
    public boolean hasLastLapTime() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional float lastLapTime = 15;</code>
     */
    public float getLastLapTime() {
      return lastLapTime_;
    }

    public static final int RACEPOS_FIELD_NUMBER = 16;
    private int racePos_;
    /**
     * <code>optional int32 racePos = 16;</code>
     */
    public boolean hasRacePos() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 racePos = 16;</code>
     */
    public int getRacePos() {
      return racePos_;
    }

    public static final int RPM_FIELD_NUMBER = 17;
    private float rpm_;
    /**
     * <code>optional float rpm = 17;</code>
     */
    public boolean hasRpm() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional float rpm = 17;</code>
     */
    public float getRpm() {
      return rpm_;
    }

    public static final int SPEEDX_FIELD_NUMBER = 18;
    private float speedX_;
    /**
     * <code>optional float speedX = 18;</code>
     */
    public boolean hasSpeedX() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional float speedX = 18;</code>
     */
    public float getSpeedX() {
      return speedX_;
    }

    public static final int SPEEDY_FIELD_NUMBER = 19;
    private float speedY_;
    /**
     * <code>optional float speedY = 19;</code>
     */
    public boolean hasSpeedY() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional float speedY = 19;</code>
     */
    public float getSpeedY() {
      return speedY_;
    }

    public static final int SPEEDZ_FIELD_NUMBER = 20;
    private float speedZ_;
    /**
     * <code>optional float speedZ = 20;</code>
     */
    public boolean hasSpeedZ() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional float speedZ = 20;</code>
     */
    public float getSpeedZ() {
      return speedZ_;
    }

    public static final int DISTTOMIDDLE_FIELD_NUMBER = 21;
    private float distToMiddle_;
    /**
     * <code>optional float distToMiddle = 21;</code>
     */
    public boolean hasDistToMiddle() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional float distToMiddle = 21;</code>
     */
    public float getDistToMiddle() {
      return distToMiddle_;
    }

    public static final int POSZ_FIELD_NUMBER = 22;
    private float posZ_;
    /**
     * <code>optional float posZ = 22;</code>
     */
    public boolean hasPosZ() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional float posZ = 22;</code>
     */
    public float getPosZ() {
      return posZ_;
    }

    public static final int FPS_FIELD_NUMBER = 23;
    private float fps_;
    /**
     * <code>optional float fps = 23;</code>
     */
    public boolean hasFps() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional float fps = 23;</code>
     */
    public float getFps() {
      return fps_;
    }

    public static final int COUNT_FIELD_NUMBER = 24;
    private int count_;
    /**
     * <code>optional int32 count = 24;</code>
     */
    public boolean hasCount() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional int32 count = 24;</code>
     */
    public int getCount() {
      return count_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, accel_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, breaking_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, gear_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, steer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, meta_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, clutch_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, focus_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, angle_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, cuLapTime_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, damage_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, distFromStart_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, totalDistFromStart_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, distRaced_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, fuel_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeFloat(15, lastLapTime_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(16, racePos_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeFloat(17, rpm_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeFloat(18, speedX_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeFloat(19, speedY_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeFloat(20, speedZ_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeFloat(21, distToMiddle_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeFloat(22, posZ_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeFloat(23, fps_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeInt32(24, count_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, accel_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, breaking_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, gear_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, steer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, meta_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, clutch_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, focus_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, angle_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, cuLapTime_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, damage_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, distFromStart_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, totalDistFromStart_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, distRaced_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, fuel_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, lastLapTime_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, racePos_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, rpm_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(18, speedX_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(19, speedY_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(20, speedZ_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(21, distToMiddle_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(22, posZ_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(23, fps_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, count_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof TORCS_Sensors.Sensors_Message.Sensors)) {
        return super.equals(obj);
      }
      TORCS_Sensors.Sensors_Message.Sensors other = (TORCS_Sensors.Sensors_Message.Sensors) obj;

      boolean result = true;
      result = result && (hasAccel() == other.hasAccel());
      if (hasAccel()) {
        result = result && (
            java.lang.Float.floatToIntBits(getAccel())
            == java.lang.Float.floatToIntBits(
                other.getAccel()));
      }
      result = result && (hasBreaking() == other.hasBreaking());
      if (hasBreaking()) {
        result = result && (
            java.lang.Float.floatToIntBits(getBreaking())
            == java.lang.Float.floatToIntBits(
                other.getBreaking()));
      }
      result = result && (hasGear() == other.hasGear());
      if (hasGear()) {
        result = result && (getGear()
            == other.getGear());
      }
      result = result && (hasSteer() == other.hasSteer());
      if (hasSteer()) {
        result = result && (
            java.lang.Float.floatToIntBits(getSteer())
            == java.lang.Float.floatToIntBits(
                other.getSteer()));
      }
      result = result && (hasMeta() == other.hasMeta());
      if (hasMeta()) {
        result = result && (getMeta()
            == other.getMeta());
      }
      result = result && (hasClutch() == other.hasClutch());
      if (hasClutch()) {
        result = result && (
            java.lang.Float.floatToIntBits(getClutch())
            == java.lang.Float.floatToIntBits(
                other.getClutch()));
      }
      result = result && (hasFocus() == other.hasFocus());
      if (hasFocus()) {
        result = result && (getFocus()
            == other.getFocus());
      }
      result = result && (hasAngle() == other.hasAngle());
      if (hasAngle()) {
        result = result && (
            java.lang.Float.floatToIntBits(getAngle())
            == java.lang.Float.floatToIntBits(
                other.getAngle()));
      }
      result = result && (hasCuLapTime() == other.hasCuLapTime());
      if (hasCuLapTime()) {
        result = result && (
            java.lang.Float.floatToIntBits(getCuLapTime())
            == java.lang.Float.floatToIntBits(
                other.getCuLapTime()));
      }
      result = result && (hasDamage() == other.hasDamage());
      if (hasDamage()) {
        result = result && (getDamage()
            == other.getDamage());
      }
      result = result && (hasDistFromStart() == other.hasDistFromStart());
      if (hasDistFromStart()) {
        result = result && (
            java.lang.Float.floatToIntBits(getDistFromStart())
            == java.lang.Float.floatToIntBits(
                other.getDistFromStart()));
      }
      result = result && (hasTotalDistFromStart() == other.hasTotalDistFromStart());
      if (hasTotalDistFromStart()) {
        result = result && (
            java.lang.Float.floatToIntBits(getTotalDistFromStart())
            == java.lang.Float.floatToIntBits(
                other.getTotalDistFromStart()));
      }
      result = result && (hasDistRaced() == other.hasDistRaced());
      if (hasDistRaced()) {
        result = result && (
            java.lang.Float.floatToIntBits(getDistRaced())
            == java.lang.Float.floatToIntBits(
                other.getDistRaced()));
      }
      result = result && (hasFuel() == other.hasFuel());
      if (hasFuel()) {
        result = result && (
            java.lang.Float.floatToIntBits(getFuel())
            == java.lang.Float.floatToIntBits(
                other.getFuel()));
      }
      result = result && (hasLastLapTime() == other.hasLastLapTime());
      if (hasLastLapTime()) {
        result = result && (
            java.lang.Float.floatToIntBits(getLastLapTime())
            == java.lang.Float.floatToIntBits(
                other.getLastLapTime()));
      }
      result = result && (hasRacePos() == other.hasRacePos());
      if (hasRacePos()) {
        result = result && (getRacePos()
            == other.getRacePos());
      }
      result = result && (hasRpm() == other.hasRpm());
      if (hasRpm()) {
        result = result && (
            java.lang.Float.floatToIntBits(getRpm())
            == java.lang.Float.floatToIntBits(
                other.getRpm()));
      }
      result = result && (hasSpeedX() == other.hasSpeedX());
      if (hasSpeedX()) {
        result = result && (
            java.lang.Float.floatToIntBits(getSpeedX())
            == java.lang.Float.floatToIntBits(
                other.getSpeedX()));
      }
      result = result && (hasSpeedY() == other.hasSpeedY());
      if (hasSpeedY()) {
        result = result && (
            java.lang.Float.floatToIntBits(getSpeedY())
            == java.lang.Float.floatToIntBits(
                other.getSpeedY()));
      }
      result = result && (hasSpeedZ() == other.hasSpeedZ());
      if (hasSpeedZ()) {
        result = result && (
            java.lang.Float.floatToIntBits(getSpeedZ())
            == java.lang.Float.floatToIntBits(
                other.getSpeedZ()));
      }
      result = result && (hasDistToMiddle() == other.hasDistToMiddle());
      if (hasDistToMiddle()) {
        result = result && (
            java.lang.Float.floatToIntBits(getDistToMiddle())
            == java.lang.Float.floatToIntBits(
                other.getDistToMiddle()));
      }
      result = result && (hasPosZ() == other.hasPosZ());
      if (hasPosZ()) {
        result = result && (
            java.lang.Float.floatToIntBits(getPosZ())
            == java.lang.Float.floatToIntBits(
                other.getPosZ()));
      }
      result = result && (hasFps() == other.hasFps());
      if (hasFps()) {
        result = result && (
            java.lang.Float.floatToIntBits(getFps())
            == java.lang.Float.floatToIntBits(
                other.getFps()));
      }
      result = result && (hasCount() == other.hasCount());
      if (hasCount()) {
        result = result && (getCount()
            == other.getCount());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAccel()) {
        hash = (37 * hash) + ACCEL_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getAccel());
      }
      if (hasBreaking()) {
        hash = (37 * hash) + BREAKING_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getBreaking());
      }
      if (hasGear()) {
        hash = (37 * hash) + GEAR_FIELD_NUMBER;
        hash = (53 * hash) + getGear();
      }
      if (hasSteer()) {
        hash = (37 * hash) + STEER_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSteer());
      }
      if (hasMeta()) {
        hash = (37 * hash) + META_FIELD_NUMBER;
        hash = (53 * hash) + getMeta();
      }
      if (hasClutch()) {
        hash = (37 * hash) + CLUTCH_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getClutch());
      }
      if (hasFocus()) {
        hash = (37 * hash) + FOCUS_FIELD_NUMBER;
        hash = (53 * hash) + getFocus();
      }
      if (hasAngle()) {
        hash = (37 * hash) + ANGLE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getAngle());
      }
      if (hasCuLapTime()) {
        hash = (37 * hash) + CULAPTIME_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getCuLapTime());
      }
      if (hasDamage()) {
        hash = (37 * hash) + DAMAGE_FIELD_NUMBER;
        hash = (53 * hash) + getDamage();
      }
      if (hasDistFromStart()) {
        hash = (37 * hash) + DISTFROMSTART_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getDistFromStart());
      }
      if (hasTotalDistFromStart()) {
        hash = (37 * hash) + TOTALDISTFROMSTART_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getTotalDistFromStart());
      }
      if (hasDistRaced()) {
        hash = (37 * hash) + DISTRACED_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getDistRaced());
      }
      if (hasFuel()) {
        hash = (37 * hash) + FUEL_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getFuel());
      }
      if (hasLastLapTime()) {
        hash = (37 * hash) + LASTLAPTIME_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getLastLapTime());
      }
      if (hasRacePos()) {
        hash = (37 * hash) + RACEPOS_FIELD_NUMBER;
        hash = (53 * hash) + getRacePos();
      }
      if (hasRpm()) {
        hash = (37 * hash) + RPM_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getRpm());
      }
      if (hasSpeedX()) {
        hash = (37 * hash) + SPEEDX_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSpeedX());
      }
      if (hasSpeedY()) {
        hash = (37 * hash) + SPEEDY_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSpeedY());
      }
      if (hasSpeedZ()) {
        hash = (37 * hash) + SPEEDZ_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getSpeedZ());
      }
      if (hasDistToMiddle()) {
        hash = (37 * hash) + DISTTOMIDDLE_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getDistToMiddle());
      }
      if (hasPosZ()) {
        hash = (37 * hash) + POSZ_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getPosZ());
      }
      if (hasFps()) {
        hash = (37 * hash) + FPS_FIELD_NUMBER;
        hash = (53 * hash) + java.lang.Float.floatToIntBits(
            getFps());
      }
      if (hasCount()) {
        hash = (37 * hash) + COUNT_FIELD_NUMBER;
        hash = (53 * hash) + getCount();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static TORCS_Sensors.Sensors_Message.Sensors parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TORCS_Sensors.Sensors_Message.Sensors parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TORCS_Sensors.Sensors_Message.Sensors parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TORCS_Sensors.Sensors_Message.Sensors parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TORCS_Sensors.Sensors_Message.Sensors parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static TORCS_Sensors.Sensors_Message.Sensors parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static TORCS_Sensors.Sensors_Message.Sensors parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static TORCS_Sensors.Sensors_Message.Sensors parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static TORCS_Sensors.Sensors_Message.Sensors parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static TORCS_Sensors.Sensors_Message.Sensors parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static TORCS_Sensors.Sensors_Message.Sensors parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static TORCS_Sensors.Sensors_Message.Sensors parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(TORCS_Sensors.Sensors_Message.Sensors prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code TORCS_Sensors.Sensors}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:TORCS_Sensors.Sensors)
        TORCS_Sensors.Sensors_Message.SensorsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return TORCS_Sensors.Sensors_Message.internal_static_TORCS_Sensors_Sensors_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return TORCS_Sensors.Sensors_Message.internal_static_TORCS_Sensors_Sensors_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                TORCS_Sensors.Sensors_Message.Sensors.class, TORCS_Sensors.Sensors_Message.Sensors.Builder.class);
      }

      // Construct using TORCS_Sensors.Sensors_Message.Sensors.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        accel_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        breaking_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        gear_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        steer_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        meta_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        clutch_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        focus_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        angle_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        cuLapTime_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        damage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        distFromStart_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        totalDistFromStart_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        distRaced_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        fuel_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        lastLapTime_ = 0F;
        bitField0_ = (bitField0_ & ~0x00004000);
        racePos_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        rpm_ = 0F;
        bitField0_ = (bitField0_ & ~0x00010000);
        speedX_ = 0F;
        bitField0_ = (bitField0_ & ~0x00020000);
        speedY_ = 0F;
        bitField0_ = (bitField0_ & ~0x00040000);
        speedZ_ = 0F;
        bitField0_ = (bitField0_ & ~0x00080000);
        distToMiddle_ = 0F;
        bitField0_ = (bitField0_ & ~0x00100000);
        posZ_ = 0F;
        bitField0_ = (bitField0_ & ~0x00200000);
        fps_ = 0F;
        bitField0_ = (bitField0_ & ~0x00400000);
        count_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return TORCS_Sensors.Sensors_Message.internal_static_TORCS_Sensors_Sensors_descriptor;
      }

      @java.lang.Override
      public TORCS_Sensors.Sensors_Message.Sensors getDefaultInstanceForType() {
        return TORCS_Sensors.Sensors_Message.Sensors.getDefaultInstance();
      }

      @java.lang.Override
      public TORCS_Sensors.Sensors_Message.Sensors build() {
        TORCS_Sensors.Sensors_Message.Sensors result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public TORCS_Sensors.Sensors_Message.Sensors buildPartial() {
        TORCS_Sensors.Sensors_Message.Sensors result = new TORCS_Sensors.Sensors_Message.Sensors(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.accel_ = accel_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.breaking_ = breaking_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.gear_ = gear_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.steer_ = steer_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.meta_ = meta_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.clutch_ = clutch_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.focus_ = focus_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.angle_ = angle_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.cuLapTime_ = cuLapTime_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.damage_ = damage_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.distFromStart_ = distFromStart_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.totalDistFromStart_ = totalDistFromStart_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.distRaced_ = distRaced_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.fuel_ = fuel_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.lastLapTime_ = lastLapTime_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.racePos_ = racePos_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.rpm_ = rpm_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.speedX_ = speedX_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.speedY_ = speedY_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.speedZ_ = speedZ_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.distToMiddle_ = distToMiddle_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.posZ_ = posZ_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.fps_ = fps_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.count_ = count_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof TORCS_Sensors.Sensors_Message.Sensors) {
          return mergeFrom((TORCS_Sensors.Sensors_Message.Sensors)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(TORCS_Sensors.Sensors_Message.Sensors other) {
        if (other == TORCS_Sensors.Sensors_Message.Sensors.getDefaultInstance()) return this;
        if (other.hasAccel()) {
          setAccel(other.getAccel());
        }
        if (other.hasBreaking()) {
          setBreaking(other.getBreaking());
        }
        if (other.hasGear()) {
          setGear(other.getGear());
        }
        if (other.hasSteer()) {
          setSteer(other.getSteer());
        }
        if (other.hasMeta()) {
          setMeta(other.getMeta());
        }
        if (other.hasClutch()) {
          setClutch(other.getClutch());
        }
        if (other.hasFocus()) {
          setFocus(other.getFocus());
        }
        if (other.hasAngle()) {
          setAngle(other.getAngle());
        }
        if (other.hasCuLapTime()) {
          setCuLapTime(other.getCuLapTime());
        }
        if (other.hasDamage()) {
          setDamage(other.getDamage());
        }
        if (other.hasDistFromStart()) {
          setDistFromStart(other.getDistFromStart());
        }
        if (other.hasTotalDistFromStart()) {
          setTotalDistFromStart(other.getTotalDistFromStart());
        }
        if (other.hasDistRaced()) {
          setDistRaced(other.getDistRaced());
        }
        if (other.hasFuel()) {
          setFuel(other.getFuel());
        }
        if (other.hasLastLapTime()) {
          setLastLapTime(other.getLastLapTime());
        }
        if (other.hasRacePos()) {
          setRacePos(other.getRacePos());
        }
        if (other.hasRpm()) {
          setRpm(other.getRpm());
        }
        if (other.hasSpeedX()) {
          setSpeedX(other.getSpeedX());
        }
        if (other.hasSpeedY()) {
          setSpeedY(other.getSpeedY());
        }
        if (other.hasSpeedZ()) {
          setSpeedZ(other.getSpeedZ());
        }
        if (other.hasDistToMiddle()) {
          setDistToMiddle(other.getDistToMiddle());
        }
        if (other.hasPosZ()) {
          setPosZ(other.getPosZ());
        }
        if (other.hasFps()) {
          setFps(other.getFps());
        }
        if (other.hasCount()) {
          setCount(other.getCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        TORCS_Sensors.Sensors_Message.Sensors parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (TORCS_Sensors.Sensors_Message.Sensors) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float accel_ ;
      /**
       * <code>optional float accel = 1;</code>
       */
      public boolean hasAccel() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float accel = 1;</code>
       */
      public float getAccel() {
        return accel_;
      }
      /**
       * <code>optional float accel = 1;</code>
       */
      public Builder setAccel(float value) {
        bitField0_ |= 0x00000001;
        accel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float accel = 1;</code>
       */
      public Builder clearAccel() {
        bitField0_ = (bitField0_ & ~0x00000001);
        accel_ = 0F;
        onChanged();
        return this;
      }

      private float breaking_ ;
      /**
       * <code>optional float breaking = 2;</code>
       */
      public boolean hasBreaking() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float breaking = 2;</code>
       */
      public float getBreaking() {
        return breaking_;
      }
      /**
       * <code>optional float breaking = 2;</code>
       */
      public Builder setBreaking(float value) {
        bitField0_ |= 0x00000002;
        breaking_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float breaking = 2;</code>
       */
      public Builder clearBreaking() {
        bitField0_ = (bitField0_ & ~0x00000002);
        breaking_ = 0F;
        onChanged();
        return this;
      }

      private int gear_ ;
      /**
       * <code>optional int32 gear = 3;</code>
       */
      public boolean hasGear() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 gear = 3;</code>
       */
      public int getGear() {
        return gear_;
      }
      /**
       * <code>optional int32 gear = 3;</code>
       */
      public Builder setGear(int value) {
        bitField0_ |= 0x00000004;
        gear_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 gear = 3;</code>
       */
      public Builder clearGear() {
        bitField0_ = (bitField0_ & ~0x00000004);
        gear_ = 0;
        onChanged();
        return this;
      }

      private float steer_ ;
      /**
       * <code>optional float steer = 4;</code>
       */
      public boolean hasSteer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float steer = 4;</code>
       */
      public float getSteer() {
        return steer_;
      }
      /**
       * <code>optional float steer = 4;</code>
       */
      public Builder setSteer(float value) {
        bitField0_ |= 0x00000008;
        steer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float steer = 4;</code>
       */
      public Builder clearSteer() {
        bitField0_ = (bitField0_ & ~0x00000008);
        steer_ = 0F;
        onChanged();
        return this;
      }

      private int meta_ ;
      /**
       * <code>optional int32 meta = 5;</code>
       */
      public boolean hasMeta() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 meta = 5;</code>
       */
      public int getMeta() {
        return meta_;
      }
      /**
       * <code>optional int32 meta = 5;</code>
       */
      public Builder setMeta(int value) {
        bitField0_ |= 0x00000010;
        meta_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 meta = 5;</code>
       */
      public Builder clearMeta() {
        bitField0_ = (bitField0_ & ~0x00000010);
        meta_ = 0;
        onChanged();
        return this;
      }

      private float clutch_ ;
      /**
       * <code>optional float clutch = 6;</code>
       */
      public boolean hasClutch() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float clutch = 6;</code>
       */
      public float getClutch() {
        return clutch_;
      }
      /**
       * <code>optional float clutch = 6;</code>
       */
      public Builder setClutch(float value) {
        bitField0_ |= 0x00000020;
        clutch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float clutch = 6;</code>
       */
      public Builder clearClutch() {
        bitField0_ = (bitField0_ & ~0x00000020);
        clutch_ = 0F;
        onChanged();
        return this;
      }

      private int focus_ ;
      /**
       * <code>optional int32 focus = 7;</code>
       */
      public boolean hasFocus() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 focus = 7;</code>
       */
      public int getFocus() {
        return focus_;
      }
      /**
       * <code>optional int32 focus = 7;</code>
       */
      public Builder setFocus(int value) {
        bitField0_ |= 0x00000040;
        focus_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 focus = 7;</code>
       */
      public Builder clearFocus() {
        bitField0_ = (bitField0_ & ~0x00000040);
        focus_ = 0;
        onChanged();
        return this;
      }

      private float angle_ ;
      /**
       * <code>optional float angle = 8;</code>
       */
      public boolean hasAngle() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float angle = 8;</code>
       */
      public float getAngle() {
        return angle_;
      }
      /**
       * <code>optional float angle = 8;</code>
       */
      public Builder setAngle(float value) {
        bitField0_ |= 0x00000080;
        angle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float angle = 8;</code>
       */
      public Builder clearAngle() {
        bitField0_ = (bitField0_ & ~0x00000080);
        angle_ = 0F;
        onChanged();
        return this;
      }

      private float cuLapTime_ ;
      /**
       * <code>optional float cuLapTime = 9;</code>
       */
      public boolean hasCuLapTime() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float cuLapTime = 9;</code>
       */
      public float getCuLapTime() {
        return cuLapTime_;
      }
      /**
       * <code>optional float cuLapTime = 9;</code>
       */
      public Builder setCuLapTime(float value) {
        bitField0_ |= 0x00000100;
        cuLapTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float cuLapTime = 9;</code>
       */
      public Builder clearCuLapTime() {
        bitField0_ = (bitField0_ & ~0x00000100);
        cuLapTime_ = 0F;
        onChanged();
        return this;
      }

      private int damage_ ;
      /**
       * <code>optional int32 damage = 10;</code>
       */
      public boolean hasDamage() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 damage = 10;</code>
       */
      public int getDamage() {
        return damage_;
      }
      /**
       * <code>optional int32 damage = 10;</code>
       */
      public Builder setDamage(int value) {
        bitField0_ |= 0x00000200;
        damage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 damage = 10;</code>
       */
      public Builder clearDamage() {
        bitField0_ = (bitField0_ & ~0x00000200);
        damage_ = 0;
        onChanged();
        return this;
      }

      private float distFromStart_ ;
      /**
       * <code>optional float distFromStart = 11;</code>
       */
      public boolean hasDistFromStart() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float distFromStart = 11;</code>
       */
      public float getDistFromStart() {
        return distFromStart_;
      }
      /**
       * <code>optional float distFromStart = 11;</code>
       */
      public Builder setDistFromStart(float value) {
        bitField0_ |= 0x00000400;
        distFromStart_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float distFromStart = 11;</code>
       */
      public Builder clearDistFromStart() {
        bitField0_ = (bitField0_ & ~0x00000400);
        distFromStart_ = 0F;
        onChanged();
        return this;
      }

      private float totalDistFromStart_ ;
      /**
       * <code>optional float totalDistFromStart = 12;</code>
       */
      public boolean hasTotalDistFromStart() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float totalDistFromStart = 12;</code>
       */
      public float getTotalDistFromStart() {
        return totalDistFromStart_;
      }
      /**
       * <code>optional float totalDistFromStart = 12;</code>
       */
      public Builder setTotalDistFromStart(float value) {
        bitField0_ |= 0x00000800;
        totalDistFromStart_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float totalDistFromStart = 12;</code>
       */
      public Builder clearTotalDistFromStart() {
        bitField0_ = (bitField0_ & ~0x00000800);
        totalDistFromStart_ = 0F;
        onChanged();
        return this;
      }

      private float distRaced_ ;
      /**
       * <code>optional float distRaced = 13;</code>
       */
      public boolean hasDistRaced() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float distRaced = 13;</code>
       */
      public float getDistRaced() {
        return distRaced_;
      }
      /**
       * <code>optional float distRaced = 13;</code>
       */
      public Builder setDistRaced(float value) {
        bitField0_ |= 0x00001000;
        distRaced_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float distRaced = 13;</code>
       */
      public Builder clearDistRaced() {
        bitField0_ = (bitField0_ & ~0x00001000);
        distRaced_ = 0F;
        onChanged();
        return this;
      }

      private float fuel_ ;
      /**
       * <code>optional float fuel = 14;</code>
       */
      public boolean hasFuel() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float fuel = 14;</code>
       */
      public float getFuel() {
        return fuel_;
      }
      /**
       * <code>optional float fuel = 14;</code>
       */
      public Builder setFuel(float value) {
        bitField0_ |= 0x00002000;
        fuel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fuel = 14;</code>
       */
      public Builder clearFuel() {
        bitField0_ = (bitField0_ & ~0x00002000);
        fuel_ = 0F;
        onChanged();
        return this;
      }

      private float lastLapTime_ ;
      /**
       * <code>optional float lastLapTime = 15;</code>
       */
      public boolean hasLastLapTime() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float lastLapTime = 15;</code>
       */
      public float getLastLapTime() {
        return lastLapTime_;
      }
      /**
       * <code>optional float lastLapTime = 15;</code>
       */
      public Builder setLastLapTime(float value) {
        bitField0_ |= 0x00004000;
        lastLapTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float lastLapTime = 15;</code>
       */
      public Builder clearLastLapTime() {
        bitField0_ = (bitField0_ & ~0x00004000);
        lastLapTime_ = 0F;
        onChanged();
        return this;
      }

      private int racePos_ ;
      /**
       * <code>optional int32 racePos = 16;</code>
       */
      public boolean hasRacePos() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional int32 racePos = 16;</code>
       */
      public int getRacePos() {
        return racePos_;
      }
      /**
       * <code>optional int32 racePos = 16;</code>
       */
      public Builder setRacePos(int value) {
        bitField0_ |= 0x00008000;
        racePos_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 racePos = 16;</code>
       */
      public Builder clearRacePos() {
        bitField0_ = (bitField0_ & ~0x00008000);
        racePos_ = 0;
        onChanged();
        return this;
      }

      private float rpm_ ;
      /**
       * <code>optional float rpm = 17;</code>
       */
      public boolean hasRpm() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional float rpm = 17;</code>
       */
      public float getRpm() {
        return rpm_;
      }
      /**
       * <code>optional float rpm = 17;</code>
       */
      public Builder setRpm(float value) {
        bitField0_ |= 0x00010000;
        rpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rpm = 17;</code>
       */
      public Builder clearRpm() {
        bitField0_ = (bitField0_ & ~0x00010000);
        rpm_ = 0F;
        onChanged();
        return this;
      }

      private float speedX_ ;
      /**
       * <code>optional float speedX = 18;</code>
       */
      public boolean hasSpeedX() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float speedX = 18;</code>
       */
      public float getSpeedX() {
        return speedX_;
      }
      /**
       * <code>optional float speedX = 18;</code>
       */
      public Builder setSpeedX(float value) {
        bitField0_ |= 0x00020000;
        speedX_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedX = 18;</code>
       */
      public Builder clearSpeedX() {
        bitField0_ = (bitField0_ & ~0x00020000);
        speedX_ = 0F;
        onChanged();
        return this;
      }

      private float speedY_ ;
      /**
       * <code>optional float speedY = 19;</code>
       */
      public boolean hasSpeedY() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional float speedY = 19;</code>
       */
      public float getSpeedY() {
        return speedY_;
      }
      /**
       * <code>optional float speedY = 19;</code>
       */
      public Builder setSpeedY(float value) {
        bitField0_ |= 0x00040000;
        speedY_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedY = 19;</code>
       */
      public Builder clearSpeedY() {
        bitField0_ = (bitField0_ & ~0x00040000);
        speedY_ = 0F;
        onChanged();
        return this;
      }

      private float speedZ_ ;
      /**
       * <code>optional float speedZ = 20;</code>
       */
      public boolean hasSpeedZ() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional float speedZ = 20;</code>
       */
      public float getSpeedZ() {
        return speedZ_;
      }
      /**
       * <code>optional float speedZ = 20;</code>
       */
      public Builder setSpeedZ(float value) {
        bitField0_ |= 0x00080000;
        speedZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float speedZ = 20;</code>
       */
      public Builder clearSpeedZ() {
        bitField0_ = (bitField0_ & ~0x00080000);
        speedZ_ = 0F;
        onChanged();
        return this;
      }

      private float distToMiddle_ ;
      /**
       * <code>optional float distToMiddle = 21;</code>
       */
      public boolean hasDistToMiddle() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional float distToMiddle = 21;</code>
       */
      public float getDistToMiddle() {
        return distToMiddle_;
      }
      /**
       * <code>optional float distToMiddle = 21;</code>
       */
      public Builder setDistToMiddle(float value) {
        bitField0_ |= 0x00100000;
        distToMiddle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float distToMiddle = 21;</code>
       */
      public Builder clearDistToMiddle() {
        bitField0_ = (bitField0_ & ~0x00100000);
        distToMiddle_ = 0F;
        onChanged();
        return this;
      }

      private float posZ_ ;
      /**
       * <code>optional float posZ = 22;</code>
       */
      public boolean hasPosZ() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional float posZ = 22;</code>
       */
      public float getPosZ() {
        return posZ_;
      }
      /**
       * <code>optional float posZ = 22;</code>
       */
      public Builder setPosZ(float value) {
        bitField0_ |= 0x00200000;
        posZ_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float posZ = 22;</code>
       */
      public Builder clearPosZ() {
        bitField0_ = (bitField0_ & ~0x00200000);
        posZ_ = 0F;
        onChanged();
        return this;
      }

      private float fps_ ;
      /**
       * <code>optional float fps = 23;</code>
       */
      public boolean hasFps() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional float fps = 23;</code>
       */
      public float getFps() {
        return fps_;
      }
      /**
       * <code>optional float fps = 23;</code>
       */
      public Builder setFps(float value) {
        bitField0_ |= 0x00400000;
        fps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float fps = 23;</code>
       */
      public Builder clearFps() {
        bitField0_ = (bitField0_ & ~0x00400000);
        fps_ = 0F;
        onChanged();
        return this;
      }

      private int count_ ;
      /**
       * <code>optional int32 count = 24;</code>
       */
      public boolean hasCount() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 count = 24;</code>
       */
      public int getCount() {
        return count_;
      }
      /**
       * <code>optional int32 count = 24;</code>
       */
      public Builder setCount(int value) {
        bitField0_ |= 0x00800000;
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 count = 24;</code>
       */
      public Builder clearCount() {
        bitField0_ = (bitField0_ & ~0x00800000);
        count_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:TORCS_Sensors.Sensors)
    }

    // @@protoc_insertion_point(class_scope:TORCS_Sensors.Sensors)
    private static final TORCS_Sensors.Sensors_Message.Sensors DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new TORCS_Sensors.Sensors_Message.Sensors();
    }

    public static TORCS_Sensors.Sensors_Message.Sensors getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<Sensors>
        PARSER = new com.google.protobuf.AbstractParser<Sensors>() {
      @java.lang.Override
      public Sensors parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Sensors(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Sensors> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Sensors> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public TORCS_Sensors.Sensors_Message.Sensors getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_TORCS_Sensors_Sensors_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_TORCS_Sensors_Sensors_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022proto_schema.proto\022\rTORCS_Sensors\"\235\003\n\007" +
      "Sensors\022\r\n\005accel\030\001 \001(\002\022\020\n\010breaking\030\002 \001(\002" +
      "\022\014\n\004gear\030\003 \001(\005\022\r\n\005steer\030\004 \001(\002\022\014\n\004meta\030\005 " +
      "\001(\005\022\016\n\006clutch\030\006 \001(\002\022\r\n\005focus\030\007 \001(\005\022\r\n\005an" +
      "gle\030\010 \001(\002\022\021\n\tcuLapTime\030\t \001(\002\022\016\n\006damage\030\n" +
      " \001(\005\022\025\n\rdistFromStart\030\013 \001(\002\022\032\n\022totalDist" +
      "FromStart\030\014 \001(\002\022\021\n\tdistRaced\030\r \001(\002\022\014\n\004fu" +
      "el\030\016 \001(\002\022\023\n\013lastLapTime\030\017 \001(\002\022\017\n\007racePos" +
      "\030\020 \001(\005\022\013\n\003rpm\030\021 \001(\002\022\016\n\006speedX\030\022 \001(\002\022\016\n\006s" +
      "peedY\030\023 \001(\002\022\016\n\006speedZ\030\024 \001(\002\022\024\n\014distToMid" +
      "dle\030\025 \001(\002\022\014\n\004posZ\030\026 \001(\002\022\013\n\003fps\030\027 \001(\002\022\r\n\005" +
      "count\030\030 \001(\005B\021B\017Sensors_Message"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_TORCS_Sensors_Sensors_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_TORCS_Sensors_Sensors_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_TORCS_Sensors_Sensors_descriptor,
        new java.lang.String[] { "Accel", "Breaking", "Gear", "Steer", "Meta", "Clutch", "Focus", "Angle", "CuLapTime", "Damage", "DistFromStart", "TotalDistFromStart", "DistRaced", "Fuel", "LastLapTime", "RacePos", "Rpm", "SpeedX", "SpeedY", "SpeedZ", "DistToMiddle", "PosZ", "Fps", "Count", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
